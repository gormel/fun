//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 24.02.2018 12:56:38
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.Data;
using System.ComponentModel;
using System.Collections.Generic;
using System.Reflection;
using System.Linq;
using System.Linq.Expressions;

namespace ShDeviceContext
{

    [DatabaseAttribute(Name = "sh_devices")]
    [ProviderAttribute(typeof(Devart.Data.MySql.Linq.Provider.MySqlDataProvider))]
    public partial class ShDeviceDataContext : Devart.Data.Linq.DataContext
    {
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(ShDeviceDataContext));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        partial void OnCreated();
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);
        partial void InsertDevice(Device instance);
        partial void UpdateDevice(Device instance);
        partial void DeleteDevice(Device instance);

        #endregion

        public ShDeviceDataContext() :
        base(GetConnectionString("ShDeviceDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        public ShDeviceDataContext(MappingSource mappingSource) :
        base(GetConnectionString("ShDeviceDataContextConnectionString"), mappingSource)
        {
            OnCreated();
        }

        private static string GetConnectionString(string connectionStringName)
        {
            System.Configuration.ConnectionStringSettings connectionStringSettings = System.Configuration.ConfigurationManager.ConnectionStrings[connectionStringName];
            if (connectionStringSettings == null)
                throw new InvalidOperationException("Connection string \"" + connectionStringName +"\" could not be found in the configuration file.");
            return connectionStringSettings.ConnectionString;
        }

        public ShDeviceDataContext(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ShDeviceDataContext(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ShDeviceDataContext(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public ShDeviceDataContext(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        public Devart.Data.Linq.Table<Device> Devices
        {
            get
            {
                return this.GetTable<Device>();
            }
        }
    }
}

namespace ShDeviceContext
{

    /// <summary>
    /// There are no comments for ShDeviceContext.Device in the schema.
    /// </summary>
    [Table(Name = @"sh_devices.devices")]
    public partial class Device : INotifyPropertyChanging, INotifyPropertyChanged
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private int _Type;

        private string _Mac;

        private string _Name;

        private string _Tag;
        #pragma warning restore 0649
    
        #region Extensibility Method Definitions

        partial void OnLoaded();
        partial void OnValidate(ChangeAction action);
        partial void OnCreated();
        partial void OnIdChanging(int value);
        partial void OnIdChanged();
        partial void OnTypeChanging(int value);
        partial void OnTypeChanged();
        partial void OnMacChanging(string value);
        partial void OnMacChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTagChanging(string value);
        partial void OnTagChanged();
        #endregion

        public Device()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "INT(11) NOT NULL AUTO_INCREMENT", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Type in the schema.
        /// </summary>
        [Column(Name = @"type", Storage = "_Type", CanBeNull = false, DbType = "INT(11) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int Type
        {
            get
            {
                return this._Type;
            }
            set
            {
                if (this._Type != value)
                {
                    this.OnTypeChanging(value);
                    this.SendPropertyChanging("Type");
                    this._Type = value;
                    this.SendPropertyChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Mac in the schema.
        /// </summary>
        [Column(Name = @"mac", Storage = "_Mac", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Mac
        {
            get
            {
                return this._Mac;
            }
            set
            {
                if (this._Mac != value)
                {
                    this.OnMacChanging(value);
                    this.SendPropertyChanging("Mac");
                    this._Mac = value;
                    this.SendPropertyChanged("Mac");
                    this.OnMacChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"name", Storage = "_Name", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Tag in the schema.
        /// </summary>
        [Column(Name = @"tag", Storage = "_Tag", DbType = "VARCHAR(45) NULL", UpdateCheck = UpdateCheck.Never)]
        public string Tag
        {
            get
            {
                return this._Tag;
            }
            set
            {
                if (this._Tag != value)
                {
                    this.OnTagChanging(value);
                    this.SendPropertyChanging("Tag");
                    this._Tag = value;
                    this.SendPropertyChanged("Tag");
                    this.OnTagChanged();
                }
            }
        }
   
        public event PropertyChangingEventHandler PropertyChanging;

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {    
		        var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {    
		        var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
